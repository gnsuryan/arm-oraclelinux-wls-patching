{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "_artifactsLocation": {
            "type": "string",
            "metadata": {
                "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
            },
            "defaultValue": "https://raw.githubusercontent.com/gnsuryan/arm-oraclelinux-wls-patching/master/src/main/arm/"
        },
        "_artifactsLocationSasToken": {
            "defaultValue": "",
            "type": "securestring",
            "metadata": {
                "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
            }
        },
        "adminVMName": {
            "type": "string",
            "defaultValue": "adminVM",
            "metadata": {
                "description": "Admin Server hosting VM name."
            }
        },
        "wlsUserName": {
            "defaultValue": "weblogic",
            "type": "string",
            "metadata": {
                "description": "Username for your Weblogic domain name"
            }
        },
        "wlsPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for your Weblogic domain name"
            }
        },
        "wlsAdminURL": {
            "type": "string",
            "metadata": {
                "description": "WebLogic Server Admin Console URL"
            }
        },
        "isClusterDomain": {
            "type": "bool",
            "defaultvalue" : false,
            "metadata" : {
                "description": "boolean value indicating if the existing domain is a cluster/dynamic cluster domain or not. If domain has only Admin Server, pass the value as false. For Cluster and Dynamic Cluster Domains, pass the value as true."
            }
        },
        "managedServerPrefix": {
            "type": "string",
            "defaultValue": "msp",
            "metadata": {
                "description": "Provide managed server prefix names"
            }
        },
        "numberOfmanagedServerVMs": {
            "defaultValue": 3,
            "type": "int",
            "metadata": {
                "description": "Number of managed Server VMs on which to apply the patch"
            }
        },
        "numberOfCoherenceServerVMs": {
            "defaultValue": 1,
            "type": "int",
            "metadata": {
                "description": "Number of Coherence Server VMs on which to apply the patch"
            }
        },        
        "location": {
            "type": "string",
            "default":"[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources."
            }
        },
        "wls_patch_file": {
            "type": "string",
            "metadata": {
                "description": "Name of the WebLogic Patch File which is already uploaded in to the Storage Account"
            }
        },
        "wls_patch_timestamp": {
            "type": "string",
            "defaultValue": "[utcNow('MMddyyHHmm')]",
            "metadata": {
                "description": "Timestamp required for uniquely identifying and executing custom extension script for WebLogic Patching"
            }
        }
    },
    "variables": {
        "name_scriptFile": "installPatch.sh",
        "name_adminServer": "adminVM",
        "name_coherenceServerPrefix": "Storage"
    },
    "resources": [
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('managedServerPrefix'),'VM',copyindex(1),'/newuserscript')]",
            "apiVersion": "2020-06-01",
            "location": "[parameters('location')]",
            "condition": "[parameters('isClusterDomain')]",
            "copy": {
                "name": "ManagedVMExtensionLoop",
                "count": "[parameters('numberOfmanagedServerVMs')]"
            },
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.1",
                "autoUpgradeMinorVersion": true,
                "settings": {
                      "skipDos2Unix":false,
                      "timestamp": "[int(parameters('wls_patch_timestamp'))]",
                      "fileUris": [
                            "[uri(parameters('_artifactsLocation'), concat('../scripts/', variables('name_scriptFile'), parameters('_artifactsLocationSasToken')))]"
                      ]
                },
                "protectedSettings": {
                      "commandToExecute": "[concat('sh',' ',variables('name_scriptFile'),' <<< \"',parameters('wls_patch_file'),' ',concat(parameters('managedServerPrefix'),'VM',copyindex(1)),' ',concat(parameters('managedServerPrefix'),copyindex(1)),' ',parameters('wlsUserName'),' ',parameters('wlsPassword'),' ',parameters('wlsAdminURL'),'\"')]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('adminVMName'),'/newuserscript')]",
            "apiVersion": "2020-06-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "ManagedVMExtensionLoop"],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.1",
                "autoUpgradeMinorVersion": true,
                "settings": {
                      "skipDos2Unix":false,
                      "timestamp": "[int(parameters('wls_patch_timestamp'))]",
                      "fileUris": [
                            "[uri(parameters('_artifactsLocation'), concat('../scripts/', variables('name_scriptFile'), parameters('_artifactsLocationSasToken')))]"
                      ]
                },
                "protectedSettings": {
                      "commandToExecute": "[concat('sh',' ',variables('name_scriptFile'),' <<< \"',parameters('wls_patch_file'),' ',parameters('adminVMName'),' ',variables('name_adminServer'),' ',parameters('wlsUserName'),' ',parameters('wlsPassword'),' ',parameters('wlsAdminURL'),'\"')]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('managedServerPrefix'),variables('name_coherenceServerPrefix'),'VM',copyindex(1),'/newuserscript')]",
            "apiVersion": "2020-06-01",
            "location": "[parameters('location')]",
            "condition": "[parameters('isClusterDomain')]",
            "depends": [ "ManagedVMExtensionLoop",
                         "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('adminVMName'), 'newuserscript')]"]
            ],
            "copy": {
                "name": "CoherenceVMExtensionLoop",
                "count": "[parameters('numberOfCoherenceServerVMs')]"
            },
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.1",
                "autoUpgradeMinorVersion": true,
                "settings": {
                      "skipDos2Unix":false,
                      "timestamp": "[int(parameters('wls_patch_timestamp'))]",
                      "fileUris": [
                            "[uri(parameters('_artifactsLocation'), concat('../scripts/', variables('name_scriptFile'), parameters('_artifactsLocationSasToken')))]"
                      ]
                },
                "protectedSettings": {
                      "commandToExecute": "[concat('sh',' ',variables('name_scriptFile'),' <<< \"',parameters('wls_patch_file'),' ',concat(parameters('managedServerPrefix'),variables('name_coherenceServerPrefix'),'VM',copyindex(1)),' ',concat(parameters('managedServerPrefix'),variables('name_coherenceServerPrefix'),copyindex(1)),' ',parameters('wlsUserName'),' ',parameters('wlsPassword'),' ',parameters('wlsAdminURL'),'\"')]"
                }
            }
        }

    ],
    "outputs": {
        "artifactsLocationPassedIn": {
            "type": "string",
            "value": "[parameters('_artifactsLocation')]"
        }
    }
}
